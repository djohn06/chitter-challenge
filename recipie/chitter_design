# /get & /post for 'localhost' Route Design Recipe

## 1. Design the Route Signature

* /get & /post
* http://localhost:9292
* /get params: none 
* /post body params: 
    1. message
    2. email, password, name, and username

## 2. Design the Response

The route might return different responses, depending on the result.

For example, a route for a specific blog post (by its ID) might return `200 OK` if the post exists, but `404 Not Found` if the post is not found in the database.

Your response might return plain text, JSON, or HTML code. 

_Replace the below with your own design. Think of all the different possible responses your route will return._

```html
<html>
  <head></head>
  <body>
    <form method="POST" action="/new_message">
    <h1>Chitter away!</h1>
        <div>
            <label>Message: </label>
            <input type="text" name="message" />
        <div>
  </body>
</html>

-- Response when message is recognised: 200 OK --
```

```html
<html>
  <head></head>
  <body>
    <form method="POST" action="/signup">
    <h1>Create an account with Chitter!</h1>
    <div>Enter your details below to sign up for Chitter.</div>
        <div>
            <label>Email: </label>
            <input type="text" name="email" />
        <div>

        <div>
            <label>Password: </label>
            <input type="text" name="password" />
        <div>

        <div>
            <label>Name: </label>
            <input type="text" name="name" />
        <div>

        <div>
            <label>Username: </label>
            <input type="text" name="username" />
        <div>

        <div>
            <input type="submit" />
        <div>
    <div>
  </body>
</html>

-- Respose when user is signed up: 200 OK --
```

## 3. Write Examples

_Replace these with your own design._

```
# Request:

GET /signup

# Expected response:

Response for 200 OK
```

```
# Request:

POST /new_message

# Expected response:

Response for 200 OK
Response Homepage with new message included
```

## 4. Encode as Tests Examples

```ruby
# EXAMPLE
# file: spec/integration/application_spec.rb

require "spec_helper"

describe Application do
  include Rack::Test::Methods

  let(:app) { Application.new }

  context "GET /" do
    it 'returns 200 OK' do
      # Assuming the post with id 1 exists.
      response = get('/new_message')

      expect(response.status).to eq(200)
      expect(response.body).to include('<form method="POST" action="/new_message">')
      expect(response.body).to include('<input type="text" name="message" />')
    end

  context "POST /" do
    it 'returns 200 OK' do
      response = post('/signup')

      expect(response.status).to eq(200)
      expect(response.body).to include('<input type="text" name="email" />')
      expect(response.body).to include('<label>Password: </label>')
      expect(response.body).to include('<input type="text" name="username" />')
    end
  end
end
```

## 5. Implement the Route

Write the route and web server code to implement the route behaviour.